/*
 * 82. Remove Duplicates from Sorted List II
 * Target: Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
 * Difficulty：Medium
 * Classification：Linked List
 */

/*
 * Solution 1
 * 2019-07-25  Runtime: 1 ms
 * Algorithm: => Linked List. Iteration
 * Time Complexity: O(n). Space Conplexity: O(1)
 */

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy;
        ListNode cur = head;
        while (cur != null && cur.next != null) {
            int signal = 0;
            while (cur.next != null && cur.val == cur.next.val) {
                cur = cur.next;
                signal = 1;
            }
            if (signal == 1) {
                pre.next = cur.next;
                signal = 0;
            } else {
                pre = cur;
            }
            cur = cur.next;
        }
        return dummy.next;
    }
}


/*
 * Solution 2
 * 2019-07-25  Runtime: 0 ms
 * Algorithm: => Linked List. Recursion
 * Time Complexity: ?. Space Conplexity: O(1)
 */
 
 class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null) return head;
        if (head.next != null && head.val == head.next.val) {
            while (head.next != null && head.val == head.next.val) {
                head = head.next;
            }  
            return deleteDuplicates(head.next);
        } else {
            head.next = deleteDuplicates(head.next);
        }
        return head;
    }
}
